plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.sparta'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //API 요청
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5', 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // JDBC
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    // MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'
    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Query DSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // Lombok 테스트 (@Slf4j)
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'com.h2database:h2'
    // Mail(메일인증기능)
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    // OAuth2 Client
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // AWS SDK for S3
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.261'
    // Spring Cloud AWS Starter
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    // Jackson (ObjectMapper)
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.4'

    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    // JAXB 라이브러리 (XML 데이터를 Java 객체로 변환하거나 그 반대로 변환하는 기능)  CustomMultipartFile에 사용
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'
    // Redis (Lettuce)
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

tasks.named('test') {
    useJUnitPlatform()
}

//// gradle build 시
//// QueryDSL QClass 파일 생성 위치 지정
//def generated = 'src/main/generated'
//tasks.withType(JavaCompile).configureEach {
//    options.getGeneratedSourceOutputDirectory().set(file(generated))
//}
//
//// gradle clean 시
//// QClass 디렉토리 삭제
//clean {
//    delete file(generated)
//}